"use strict";var ApplicationConfiguration=function(){var applicationModuleName="Redingote",applicationModuleVendorDependencies=["ngResource","ngMessages","ngAria","ngMaterial","ngAnimate","toastr","ui.router","ui.bootstrap","ui.utils","satellizer","ngStorage","ngIdle","angulartics","angulartics.google.analytics","infinite-scroll","pascalprecht.translate"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}(),version="0.0.0";angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module("infinite-scroll").value("THROTTLE_MILLISECONDS",150),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(function($mdThemingProvider,$mdIconProvider){$mdThemingProvider.theme("default").primaryPalette("light-blue",{})}),angular.module(ApplicationConfiguration.applicationModuleName).provider("configService",function(){var options={};this.config=function(opt){angular.extend(options,opt)},this.$get=[function(){if(!options)throw new Error("config options must be configured");return options}]}),angular.element(document).ready(function(){$.get("env.json",function(configData){console.log("env.json coming"),angular.module(ApplicationConfiguration.applicationModuleName).config(["configServiceProvider",function(configServiceProvider){"localhost"==window.location.href.substring(7,16)&&(configData.local=!0),configServiceProvider.config(configData)}]),console.log("initializing!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])})}),angular.module(ApplicationConfiguration.applicationModuleName).run(function($http,$httpBackend){$http.defaults.headers.common["Content-Type"]="application/json; charset=utf-8",$http.defaults.headers.post["Content-Type"]="application/json; charset=utf-8",$http.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}),ApplicationConfiguration.registerModule("accueil"),angular.module("accueil").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){var state=$injector.get("$state");return state.go("accueil"),$location.path()}),$stateProvider.state("accueil",{url:"/",templateUrl:"modules/accueil/views/accueil.view.html"})}]),angular.module("accueil").controller("HomeController",["$scope","$sessionStorage","$location","$auth",function($scope,$sessionStorage,$location,$auth){$scope.$storage=$sessionStorage.$default({me:[],clinicInfo:{},medications:[],api:{},buildWebNumber:""}),$scope.authentication=function(){return $auth.isAuthenticated()},$scope.authentication||$location.path("/signin")}]),angular.module("accueil").controller("AccueilController",["$scope","$state",function($scope,$state){$scope.goToPartie=function(id){$state.go("partie",{joueur:id})}}]),ApplicationConfiguration.registerModule("cartes"),angular.module("cartes").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("cartes",{url:"/cartes",templateUrl:"modules/cartes/views/cartes.view.html"})}]),angular.module("cartes").controller("CartesCarteController",["$scope",function($scope){}]),angular.module("cartes").controller("CartesCreationCirconstancesController",["$scope",function($scope){$scope.retirerElement=function(type,object){console.log(object[type]),1==object[type].length?object[type]=[]:2==object[type].length?object[type]=[1]:3==object[type].length&&(object[type]=[1,2])},$scope.ajouterElement=function(type,object){console.log("ajouter"),0==object[type].length?object[type]=[1]:1==object[type].length?object[type]=[1,2]:2==object[type].length&&(object[type]=[1,2,3])};$scope.circonstances={"Action de case":[],Action:{"Défense":[]},"Changement d'humeur":[],"Défausse":[],"Déplacement":[],Duel:{Attaque:[],"Défense":[]},"Dé":{Paysage:[2,3,4,5,7,12,16,73]},Echange:[],"Interlude musical":[],Mission:{Pioche:[],"Réussie":[]},"Montée de marche":{Tentative:[],"Réussie":[],"Echouée":[]},Question:{"Posée":[],"Répondue correctement":[],"Répondue faussement":[]},"Trois familles":[],"Utilisation d'objet":[],"Valise non matérialisée":[]}}]),angular.module("cartes").controller("CartesCreationConsequencesController",["$scope",function($scope){$scope.retirerElement=function(type,object){console.log(object[type]),1==object[type].length?object[type]=[]:2==object[type].length?object[type]=[1]:3==object[type].length&&(object[type]=[1,2])},$scope.ajouterElement=function(type,object){console.log("ajouter"),0==object[type].length?object[type]=[1]:1==object[type].length?object[type]=[1,2]:2==object[type].length&&(object[type]=[1,2,3])};var cases=[],zones=["Désert","Forêt","Mer","Marécages","Monde onirique","Montagne","Prairie","Royaume des ténèbres","Village","Ville","Zone industrielle"],typesActions=["Combustible","Faim","Feu","Insecte","Nuit","Soif","Toxique"],deplacement_avantages=["Crapauduc","Respiration sous l'eau","Vitesse doublée"];$scope.consequences={"Action : contrer":{Annulation:[],Renvoi:["Contre le lanceur","Contre n'importe qui"]},Belette:{"Brouiller l'ordre":[],"Réduire nombre requis":[1,2,3,4,5,6]},Carte:{"Défausse":[1,2,3,4,5,"Moitié","Toutes"],Don:[1,2,3,4,5,"Moitié","Toutes"],Pioche:[1,2,3,4,5,6,7],"Récuperation":[1,2,3],Vol:[1,2,3,4,5,"Moitié","Toutes"]},"Carte ouverte":{"Défausse":[1,2,3,4,5,"Toutes"],Don:[1,2,3,4,5,"Toutes"],Vol:[1,2,3,4,5,"Toutes"]},Combat:{Remporter:[],"Voler récompense":[]},"Dé":{Labyrinthe:["Doubler","Relancer"],Paysage:["Doubler","Relancer"]},"Déplacement":{Avantage:deplacement_avantages,Case:cases,"Nombre de cases":[1,2,3,4,5,6,7,8,9,10],Zone:zones},Duel:{"Bonus attaque":[1,2,3,4,5,6,7,8,9,10,11,12],"Bonus défense":[1,2,3,4,5,6,7,8,9,10,11,12],"Bonus attaque et défense":[1,2,3,4,5,6,7,8,9,10,11,12],"Changement congruence (deux joueurs)":[15,18,20],"Changement récompense":["Vol"],"Double-tranchant":[],Gagner:[]},"Grande carte":{Pioche:[1,2,3]},Lecture:{"Princesse de Clèves":[]},Mission:{Pioche:[1],"Remplacer objet requis":[1,2,3]},Modulation:{Modulation:["Fi mineur","La majeur","Ré mineur"]},"Montée de marche":{Jeu:["Echouer","Gagner","Rejouer"]},Objet:{"Création":["Photo"],Transformation:[]},Protection:{Cartes:[1,2,3,4,5,"Toutes"],"Grandes cartes":[1,2,3,4,5,"Toutes"],Type:typesActions},Tour:{Inverser:[],Passer:[1,2,3],Rejouer:[1,2,3]},"Trois familles":{"Remplacer membre requis":[1,2,3,4,5]}}}]),angular.module("cartes").controller("CartesCreationContraintesController",["$scope",function($scope){$scope.objets=[{types:[],consequences:[1],contraintes:[],moments:[1],pouvoirs:[1]},{types:[],consequences:[1],contraintes:[],moments:[1],pouvoirs:[1]}],console.log("in controller"),$scope.retirerElement=function(type,object){console.log(object[type]),1==object[type].length?object[type]=[]:2==object[type].length?object[type]=[1]:3==object[type].length&&(object[type]=[1,2])},$scope.ajouterElement=function(type,object){console.log("ajouter"),0==object[type].length?object[type]=[1]:1==object[type].length?object[type]=[1,2]:2==object[type].length&&(object[type]=[1,2,3])};var zones=["Désert","Forêt","Mer","Marécages","Monde onirique","Montagne","Prairie","Royaume des ténèbres","Village","Ville","Zone industrielle"],typesObjets=["Animal","Chat","Combustible","Electrique","Insecte","Marin","Métallique","Potion bénéfique","Potion malefique","Toxique"],typesActions=["Combustible","Faim","Insecte","Nuit","Soif","Toxique"],typesHumeurs=["Négative","Russe","Triste"];$scope.contraintes={Carte:{"Spécifique":[]},"Carte ouverte":{"Chez le lanceur":[],"Chez n'importe qui":[]},Joueur:{Adversaire:["Julia","Marie","Romain"]},Position:{Case:[],Plateau:["Escalier","Labyrinthe","Paysage"],Zone:zones},"Type de carte":{Action:typesActions,Humeur:typesHumeurs,Objet:typesObjets}}}]),angular.module("cartes").controller("CartesCreationHorsPiocheController",["$scope",function($scope){$scope.reductions=["Aucune","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi","Dimanche"]}]),angular.module("cartes").controller("CartesCreationMissionController",["$scope","Cartes",function($scope,Cartes){$scope.retirerElement=function(type,object){console.log(object[type]),object[type].splice(object[type].indexOf(object[type].length),1)},$scope.ajouterElement=function(type,object){console.log(object),object[type].push(object[type].length+1),console.log(object[type])},$scope.ajouterCarte=function(index){console.log(index),$scope.carte.info.etapes[index].cartes.push($scope.carte.info.etapes[index].cartes.length+1)},$scope.retirerCarte=function(index){$scope.carte.info.etapes[index].cartes.splice($scope.carte.info.etapes[index].cartes.length-1,1)},$scope.retirerEtape=function(){$scope.carte.info.etapes.splice($scope.carte.info.etapes.length-1,1)},$scope.ajouterEtape=function(){$scope.carte.info.etapes.push({cartes:[1],cases:[1]})};var cartesCodes=[];$scope.cartesNoms=[],Cartes.getCartes().success(function(response){for(var i in response)("pioche"===response[i].pile||"hors_pioche"===response[i].pile&&cartesCodes.indexOf(response[i].code<0))&&(cartesCodes.push(response[i].code),$scope.cartesNoms.push(response[i].nom))});console.log($scope.cartes),$scope.missions={"Apporter des cartes":{Cartes:[1],Case:$scope.cases},"Réunir des cartes":{Cartes:[1]},"Remporter des duels":{Joueurs:[]},"Visiter des cases":{Cases:$scope.cases},"Visiter des zones":{Zones:$scope.zones}}}]),angular.module("cartes").controller("CartesJeterController",["$scope","$rootScope",function($scope,$rootScope){function jeterCarte(carte){var carteJetee=!1;for(var i in $scope.cartes.liste)$scope.cartes.liste[i].id==carte.id&&(carteJetee=!0);if(!carteJetee)for(var foundSpot=!1,i=0;i<$scope.quantite&&!foundSpot;)$scope.cartes.liste[i].filled||($scope.cartes.liste[i]=carte,$scope.cartes.liste[i].filled=!0,foundSpot=!0,$scope.cartes.filled++),$scope.cartes.filled==$scope.quantite&&(console.log("full cartes"),$scope.$emit("cartes-jeter-full",{cartes:$scope.cartes.liste})),i++}$scope.removeCarte=function(index){$scope.cartes.liste[index]={},$scope.cartes.filled--,$scope.$emit("cartes-jeter-notfull",{})},$rootScope.$on("cartes-jeter-id",function(event,args){jeterCarte(args.carte)});var initializeCartesObject=function(){$scope.cartes={liste:[],filled:0};for(var i=0;i<$scope.quantite;i++)$scope.cartes.liste.push({});0===$scope.quantite&&($scope.description="Tu n'as plus de cartes de toute façon",$scope.$emit("cartes-jeter-full",{cartes:[]}))};initializeCartesObject(),$rootScope.$on("cartes-jeter-start-callback",function(event,args){args.nombreDeCartes<$scope.quantite&&($scope.quantite=args.nombreDeCartes),initializeCartesObject()}),$scope.$emit("cartes-jeter-start",{boutonName:$scope.boutonName})}]),angular.module("cartes").controller("CartesPiocheController",["$scope","$mdDialog","Cartes",function($scope,$mdDialog,Cartes){function carteSelection(){var carteOrder=Math.floor(Math.random()*$scope.pioches.pioche.length);Cartes.moveCartes({carteIds:[$scope.pioches.pioche[carteOrder].id],position:$scope.joueurId}).success(function(){var carte=$scope.pioches.pioche[carteOrder],piocheCartePopup=$mdDialog.confirm({templateUrl:"modules/cartes/views/cartes-pioche-popup.view.html",clickOutsideToClose:!0,controller:function($scope){$scope.image="modules/cartes/img/pioche/cartes_pioche_"+carte.code+".png";var flipped=!1;$scope.flip=function(){"objet"==carte.categorie&&(flipped?($scope.image="modules/cartes/img/pioche/cartes_pioche_"+carte.code+".png",flipped=!1):($scope.image="modules/cartes/img/pioche/cartes_pioche_"+carte.code+"_flipped.png",flipped=!0))}}});$mdDialog.show(piocheCartePopup),$scope.jeu.main.push($scope.pioches.pioche[carteOrder]),$scope.pioches.pioche.splice(carteOrder,1),$scope.pioches.pioche.length<=0&&$scope.defausses.pioche.length>0&&retournement(),$scope.piochesDisponibles=!0,$scope.partie.dispo.pioches.pioche--}).error(function(){$scope.piochesDisponibles=!0})}function retournement(pioche){console.log("retourning");var ids=[];for(var i in $scope.defausses.pioche)ids.push($scope.defausses.pioche[i].id);Cartes.moveCartes({carteIds:ids,position:-1}).success(function(){for(var i in $scope.defausses.pioche)$scope.pioches.pioche.push($scope.defausses.pioche[i]);$scope.defausses.pioche=[],pioche&&carteSelection()})}$scope.piochesDisponibles=!0,$scope.cartePioche=function(){if($scope.piochesDisponibles=!1,$scope.pioches.pioche.length>0||$scope.defausses.pioche.length>0)$scope.pioches.pioche.length<=0?retournement(!0):carteSelection();else{var piocheCartePopup=$mdDialog.confirm({templateUrl:"modules/core/views/core-warning-popup.view.html",clickOutsideToClose:!0,controller:function($scope){$scope.message="La pioche est vide"}});$mdDialog.show(piocheCartePopup),$scope.partie.dispo.pioches.pioche--,$scope.piochesDisponibles=!0}},$scope.carteMission=function(){if($scope.piochesDisponibles=!1,$scope.pioches.missions.length>0){var carteOrder=Math.floor(Math.random()*$scope.pioches.missions.length);Cartes.moveCartes({carteIds:[$scope.pioches.missions[carteOrder].id],position:$scope.joueurId}).success(function(){var carte=$scope.pioches.missions[carteOrder],piocheCartePopup=$mdDialog.confirm({templateUrl:"modules/cartes/views/cartes-pioche-popup.view.html",clickOutsideToClose:!0,controller:function($scope){$scope.image="modules/cartes/img/missions/cartes_missions_"+carte.code+".png"}});$mdDialog.show(piocheCartePopup),$scope.jeu.missions.push($scope.pioches.missions[carteOrder]),$scope.pioches.missions.splice(carteOrder,1),$scope.piochesDisponibles=!0,$scope.partie.dispo.pioches.missions--}).error(function(){$scope.piochesDisponibles=!0})}else{var piocheCartePopup=$mdDialog.confirm({templateUrl:"modules/core/views/core-warning-popup.view.html",clickOutsideToClose:!0,controller:function($scope){$scope.message="La pioche est vide"}});$mdDialog.show(piocheCartePopup),$scope.partie.dispo.pioches.missions--,$scope.piochesDisponibles=!0}},$scope.carteQuestion=function(){var poseur=Math.floor(3*Math.random()),poseurNoms=["Julia","Marie","Romain"],poseurTextes=["J'espère que tu connais les lois américaines stupides !","Easy !","J'espère que tu es très cultivé !"],piocheQuestionPopup=$mdDialog.confirm({templateUrl:"modules/cartes/views/cartes-questions-pioche-popup.view.html",clickOutsideToClose:!0,controller:function($scope,$mdDialog){$scope.poseur=poseurNoms[poseur],$scope.texte=poseurTextes[poseur],$scope.popupConfirm=function(){$mdDialog.hide()}}});$mdDialog.show(piocheQuestionPopup).then(function(){})}}]),angular.module("cartes").controller("CartesController",["$scope","$state","$http","Cartes","Objets","CartesProprietes",function($scope,$state,$http,Cartes,Objets,CartesProprietes){function keyToTextTransformation(carte,type){if(console.log(carte),"carte"===type?(carte.pile=CartesProprietes[carte.pile],carte.categorie=CartesProprietes[carte.categorie],carte.utilisation=CartesProprietes[carte.utilisation[0]]):"objet"===type&&(carte.utilisation=CartesProprietes[carte.utilisation]),"Action"==carte.categorie&&(carte.info.action.type=CartesProprietes[carte.info.action.type],carte.info.cible=CartesProprietes[carte.info.cible]),"Missions"===carte.pile)for(var i in carte.info.etapes){carte.info.etapes[i].categorie=CartesProprietes[carte.info.etapes[i].categorie];for(var j in carte.info.etapes[i].cartes)carte.info.etapes[i].cartes[j]=$scope.cartes.toutes[carte.info.etapes[i].cartes[j]].nom}for(var i in carte.types)carte.types[CartesProprietes[i]]=carte.types[i];console.log(carte.types);var proprietes=["consequences","contraintes","circonstances"];for(var i in proprietes){var prop=proprietes[i];if(carte[prop]=[],void 0!==carte.info[prop])for(var i in carte.info[prop])carte[prop].push(i+1),carte.info[prop][0].categorie=CartesProprietes[carte.info[prop][0].categorie],carte.info[prop][0].type=CartesProprietes[carte.info[prop][0].type],carte.info[prop][0].valeur=CartesProprietes[carte.info[prop][0].valeur];void 0!==carte.info.exclusivite&&void 0!==carte.info.exclusivite[prop]&&(carte.info.exclusivite[prop]?carte.info.exclusivite[prop]="Exclusives":carte.info.exclusivite[prop]="Non exclusives")}}function initializeCartes(){Cartes.getCartes().success(function(response){$scope.cartes={toutes:{},pioche:{},objets:{},hors_pioche:{},humeurs:{},missions:{}};for(var i in response)void 0===$scope.cartes.toutes[response[i].code]?($scope.cartes.toutes[response[i].code]=response[i],$scope.cartes.toutes[response[i].code].statuts=[response[i].statut],$scope.cartes[response[i].pile][response[i].code]=response[i]):$scope.cartes.toutes[response[i].code].statuts.push([response[i].statut]);$scope.cartesTable=$scope.cartes.toutes,Objets.getObjets().success(function(responseObjets){for(var i in responseObjets)void 0===$scope.cartes.objets[responseObjets[i].code]&&($scope.cartes.objets[responseObjets[i].code]=responseObjets[i]);console.log($scope.cartesTable)})})}function replaceSpecialCharacters(string){return string=string.replace(" : ","_"),string=string.replace(" ","_"),string=string.replace("-","_"),string=string.replace("é","e"),string=string.replace("è","e"),string=string.replace("ê","e"),string=string.replace("'","_"),string=string.replace("(",""),string=string.replace(")","")}function textToKeyTransformation(string){if("string"==typeof string){for(var i=0;i<6;i++)string=replaceSpecialCharacters(string);string=string.toLowerCase()}return string}function populateInfo(newObject,previousObject){console.log(newObject);for(var i in previousObject.consequences)newObject.consequences.push({categorie:textToKeyTransformation(previousObject.consequences[i].categorie),type:textToKeyTransformation(previousObject.consequences[i].type),valeur:textToKeyTransformation(previousObject.consequences[i].valeur)});for(var i in previousObject.contraintes)newObject.contraintes.push({categorie:textToKeyTransformation(previousObject.contraintes[i].categorie),type:textToKeyTransformation(previousObject.contraintes[i].type),valeur:textToKeyTransformation(previousObject.contraintes[i].valeur)});for(var i in previousObject.circonstances)newObject.circonstances.push({categorie:textToKeyTransformation(previousObject.circonstances[i].categorie),type:textToKeyTransformation(previousObject.circonstances[i].type),valeur:textToKeyTransformation(previousObject.circonstances[i].valeur)});void 0!==previousObject.exclusivite&&(newObject.exclusivite={contrainte:"Exclusives"===previousObject.exclusivite.contraintes,consequence:"Exclusives"===previousObject.exclusivite.consequences,circonstance:"Exclusives"===previousObject.exclusivite.circonstances})}$scope.tabs=[{id:"toutes",nom:"Toutes"},{id:"pioche",nom:"Pioche"},{id:"objets",nom:"Objets"},{id:"hors_pioche",nom:"Hors Pioche"},{id:"humeurs",nom:"Humeurs"},{id:"missions",nom:"Missions"},{id:"nouvelle_carte",nom:"Nouvelle carte"}],$scope.focusedTab=0,$scope.view="table_cartes",$scope.formSubmitted=!1,$scope.changeTab=function(index){6===$scope.focusedTab&&6!==index&&initializeCartes(),$scope.focusedTab=index,"nouvelle_carte"!=$scope.tabs[index].id&&"objets"!=$scope.tabs[index].id?($scope.cartesTable=$scope.cartes[$scope.tabs[index].id],$scope.view="table_cartes",$scope.formSubmitted=!1):"objets"===$scope.tabs[index].id?($scope.cartesTable=$scope.cartes.objets,$scope.view="table_objets",$scope.formSubmitted=!1):($scope.view="nouvelle_carte",$scope.carte={consequences:[1],contraintes:[],circonstances:[1],info:{etapes:[{cartes:[1],cases:[1]}]}},$scope.objets=[{types:[],consequences:[1],contraintes:[],circonstances:[1]},{types:[],consequences:[1],contraintes:[],circonstances:[1]}])},$scope.modifierCarte=function(code){console.log(code),$scope.carte={consequences:[1],contraintes:[],circonstances:[1]},$scope.carte=$scope.cartes.toutes[code],"pioche"===$scope.carte.pile&&"objet"===$scope.carte.categorie&&($scope.objets=[{types:[],consequences:[1],contraintes:[],circonstances:[1]},{types:[],consequences:[1],contraintes:[],circonstances:[1]}],$scope.objets[0]=$scope.cartes.objets[$scope.carte.info[0]],keyToTextTransformation($scope.objets[0],"objet"),$scope.objets[1]=$scope.cartes.objets[$scope.carte.info[1]],keyToTextTransformation($scope.objets[1],"objet")),console.log($scope.carte),keyToTextTransformation($scope.carte,"carte"),$scope.view="modifier_carte",$scope.focusedTab=6},initializeCartes();var cartesCodes=[];$scope.cartesNoms=[],Cartes.getCartes().success(function(response){for(var i in response)("pioche"===response[i].pile||"hors_pioche"===response[i].pile&&cartesCodes.indexOf(response[i].code<0))&&(cartesCodes.push(response[i].code),$scope.cartesNoms.push(response[i].nom))}),$scope.retirerElement=function(type,object){console.log(object[type]),1==object[type].length?object[type]=[]:2==object[type].length?object[type]=[1]:3==object[type].length&&(object[type]=[1,2])},$scope.ajouterElement=function(type,object){0==object[type].length?object[type]=[1]:1==object[type].length?object[type]=[1,2]:2==object[type].length&&(object[type]=[1,2,3])};$scope.cases=[],$http({method:"GET",url:"modules/plateaux/json/plateaux-paysage.json"}).success(function(response){for(var i in response)for(var j in response[i].colonnes)$scope.cases.indexOf(response[i].colonnes[j].numero)<0&&$scope.cases.push(response[i].colonnes[j].numero)});var typesObjets=["Animal","Chat","Combustible","Comestible","Electrique","Insecte","Marin","Métallique","Potion bénéfique","Potion malefique","Toxique"],typesActions=["Combustible","Faim","Insecte","Nuit","Soif","Toxique"];$scope.piles={Pioche:{categories:{Objet:{utilisations:["Action","Réaction","Ouverture"],types:typesObjets},Action:{utilisations:["Action"],info:{actions:{types:["Immédiat","Piège","Test"]},cibles:["Lanceur","Adversaire","Tout le monde","Deux joueurs"]},types:typesActions},Combat:{utilisations:["Ouverture"]},"Effet immédiat":{utilisations:["Immédiat"]},"Grande carte":{utilisations:["Ouverture"]},Orc:{utilisations:["Ouverture"]},Personnage:{utilisations:["Ouverture","Action"]}}},"Hors Pioche":{categories:{Objet:{utilisations:["Action","Réaction","Ouverture"]},"Grande carte":{}}},Humeurs:{categories:{Humeur:{}}},Missions:{categories:{Normale:{},"Spéciale":{}}}},$scope.submitButtonDisabled=!1,$scope.carteSubmitted=!1,$scope.submitForm=function(){if(console.log($scope.carte),$scope.submitButtonDisabled=!0,"Pioche"==$scope.carte.pile&&"Objet"==$scope.carte.categorie){var utilisation=[textToKeyTransformation($scope.objets[0].utilisation),textToKeyTransformation($scope.objets[1].utilisation)];console.log(utilisation)}else var utilisation=[textToKeyTransformation($scope.carte.utilisation)];var carte={nom:$scope.carte.nom,code:$scope.carte.code,pile:textToKeyTransformation($scope.carte.pile),categorie:textToKeyTransformation($scope.carte.categorie),utilisation:JSON.stringify(utilisation),types:{},info:{},statut:{}};for(var i in $scope.carte.types)carte.types[textToKeyTransformation(i)]=$scope.carte.types[i];if("pioche"==carte.pile){if("action"==carte.categorie)carte.info={action:{type:textToKeyTransformation($scope.carte.info.action.type)},cible:textToKeyTransformation($scope.carte.info.cible),consequences:[],contraintes:[],circonstances:[]},populateInfo(carte.info,$scope.carte.info);else if("objet"==carte.categorie){carte.info={0:$scope.objets[0].code,1:$scope.objets[1].code};var objets=[];for(var i in $scope.objets){objets.push({nom:$scope.objets[i].nom,code:$scope.objets[i].code,types:{},description:$scope.objets[i].description,utilisation:textToKeyTransformation($scope.objets[i].utilisation),info:{consequences:[],contraintes:[],circonstances:[]},statut:{}}),populateInfo(objets[i].info,$scope.objets[i].info);for(var j in $scope.objets[i].types)objets[i].types[textToKeyTransformation(j)]=$scope.objets[i].types[j]}}}else if("hors_pioche"===carte.pile)"objet"===carte.categorie&&(carte.info={case:textToKeyTransformation($scope.carte.info.case),prix:textToKeyTransformation($scope.carte.info.prix),reduction:textToKeyTransformation($scope.carte.info.reduction),consequences:[],contraintes:[],circonstances:[]},populateInfo(carte.info,$scope.carte.info));else if("missions"===carte.pile){carte.info={etapes:[]};for(var i in $scope.carte.info.etapes)if(carte.info.etapes.push({categorie:textToKeyTransformation($scope.carte.info.etapes[i].categorie),case:$scope.carte.info.etapes[i].case,cartes:[]}),void 0!==$scope.carte.info.etapes[i].cartes)for(var j in $scope.carte.info.etapes[i].cartes){var carteNom=$scope.carte.info.etapes[i].cartes[j],carteCode=cartesCodes[$scope.cartesNoms.indexOf(carteNom)];carte.info.etapes[i].cartes.push(carteCode)}}console.log($scope.view),"nouvelle_carte"===$scope.view?Cartes.createCarte(carte).success(function(){console.log(carte),$scope.submitButtonDisabled=!1,$scope.carteSubmitted=!0,$scope.carteImageFileName="cartes_"+carte.pile+"_"+carte.code+".png","pioche"==carte.pile&&"objet"==carte.categorie&&(Objets.createObjet(objets[0]),Objets.createObjet(objets[1]),console.log(objets))}).error(function(){console.log("error"),$scope.submitButtonDisabled=!1}):(console.log("here"),carte.id=$scope.carte.id,Cartes.modifierCarte(carte).success(function(){"pioche"==carte.pile&&"objet"==carte.categorie&&(objets[0].id=$scope.objets[0].id,objets[1].id=$scope.objets[1].id,console.log(objets),Objets.modifierObjet(objets[0]),Objets.modifierObjet(objets[1]),console.log(objets)),$scope.changeTab(0),$scope.submitButtonDisabled=!1}).error(function(){console.log("error"),$scope.submitButtonDisabled=!1}))},$scope.carteSupplementaire=function(){$scope.carte={},$scope.objets=[{types:[]},{types:[]}],$scope.carteSubmitted=!1}}]),angular.module("cartes").directive("redCartesCreationConsequences",[function(){return{templateUrl:"modules/cartes/views/cartes-creation-consequences.view.html",restrict:"E",scope:{carte:"="}}}]),angular.module("cartes").directive("redCartesCreationContraintes",[function(){return{templateUrl:"modules/cartes/views/cartes-creation-contraintes.view.html",restrict:"E",scope:{carte:"="}}}]),angular.module("cartes").directive("redCartesCreationCirconstances",[function(){return{templateUrl:"modules/cartes/views/cartes-creation-circonstances.view.html",restrict:"E",scope:{carte:"="}}}]),angular.module("cartes").directive("redCartesCreationMission",[function(){return{templateUrl:"modules/cartes/views/cartes-creation-mission.view.html",restrict:"E"}}]),angular.module("cartes").directive("redCartesCreationHorsPioche",[function(){return{templateUrl:"modules/cartes/views/cartes-creation-hors-pioche.view.html",restrict:"E"}}]),angular.module("cartes").directive("redCarte",[function(){return{templateUrl:"modules/cartes/views/cartes-carte.view.html",restrict:"E",scope:{carte:"=",focused:"=",focusCarte:"&",index:"="}}}]),angular.module("cartes").directive("redCartesJeter",[function(){return{templateUrl:"modules/cartes/views/cartes-jeter.view.html",restrict:"E",scope:{quantite:"=",description:"=",boutonName:"="}}}]),angular.module("cartes").factory("Cartes",["$http","configService",function($http,configService){return{getCartes:function(){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"GET",url:"modules/cartes/php/cartes.php",headers:{"Cache-Control":"no-cache"}})},createCarte:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/cartes/php/cartes-create.php",params:params,statut:{},headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},modifierCarte:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/cartes/php/cartes-modifier.php",params:params,statut:{},headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},moveCartes:function(params){if(configService.local)return $http({method:"GET",url:"modules/cartes/json/cartes.json"});var phpParams="";phpParams+="position="+params.position;for(var i in params.carteIds)phpParams+="&carteId[]="+params.carteIds[i];return console.log(phpParams),$http({method:"GET",url:"modules/cartes/php/cartes-move.php?"+phpParams,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},changementMain:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/cartes/php/cartes-changement-main.php",params:{carteId:params.carteId,statut:params.statut},headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})}}}]),angular.module("cartes").factory("Objets",["$http","configService",function($http,configService){return{getObjets:function(){return $http(configService.local?{method:"GET",url:"modules/cartes/json/objets.json"}:{method:"GET",url:"modules/cartes/php/objets.php",headers:{"Cache-Control":"no-cache"}})},createObjet:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/cartes/php/cartes-objets-create.php",params:params,statut:{},headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},modifierObjet:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/cartes/php/cartes-objets-modifier.php",params:params,statut:{},headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})}}}]),angular.module("cartes").service("cartesQuestionsPioche",["$mdDialog",function($mdDialog){var questionsPiocheFunctions={};return questionsPiocheFunctions.pioche=function(){var poseur=Math.floor(3*Math.random()),poseurNoms=["Julia","Marie","Romain"],poseurTextes=["J'espère que tu connais les lois américaines stupides !","Easy !","J'espère que tu es très cultivé !"],piocheQuestionPopup=$mdDialog.confirm({templateUrl:"modules/cartes/views/cartes-questions-pioche-popup.view.html",clickOutsideToClose:!0,controller:function($scope,$mdDialog){$scope.poseur=poseurNoms[poseur],$scope.texte=poseurTextes[poseur],$scope.popupConfirm=function(){$mdDialog.hide()}}});$mdDialog.show(piocheQuestionPopup).then(function(){})},questionsPiocheFunctions}]),angular.module("cartes").value("CartesProprietes",{pioche:"Pioche",hors_pioche:"Hors Pioche",humeurs:"Humeurs",missions:"Missions",objet:"Objet",action:" Action",combat:"Combat",effet_immediat:"Effet immédiat",grande_carte:"Grande carte",orc:"Orc",personnage:"Personnage",normale:"Normale",speciale:"Spéciale",action:"Action",reaction:"Réaction",ouverture:"Ouverture",immediat:"Immédiat",test:"Test",piege:"Piège",apporter_des_cartes:"Apporter des cartes",reunir_des_cartes:"Réunir des cartes",remporter_des_duels:"Remporter des duels",visiter_des_cases:"Visiter des cases",visiter_des_zones:"Visiter des zones",lanceur:"Lanceur",adversaire:"Adversaire",tout_le_monde:"Tout le monde",deux_joueurs:"Deux joueurs",action_contrer:"Action : contrer",belette:"Belette",carte:"Carte",carte_ouverte:"Carte ouverte",combat:"Combat",de:"Dé",deplacement:"Déplacement",duel:"Duel",grande_carte:"Grande carte",lecture:"Lecture",mission:"Mission",modulation:"Modulation",objet:"Objet",protection:"Protection",tour:"Tour",trois_familles:"Trois familles",joueur:"Joueur",position:"Position",type_de_carte:"Type de carte",action_de_case:"Action de case",changement_d_humeur:"Changement d'humeur",defausse:"Défausse",echange:"Echange",interlude_musical:"Interlude musical",montee_de_marche:"Montée de marche",question:"Question",utilisation_d_objet:"Utilisation d'objet",valise_non_materialisee:"Valise non matérialisée",annulation:"Annulation",adversaire:"Adversaire",avantage:"Avantage",bonus_attaque:"Bonus attaque",bonus_attaque_et_defense:"Bonus attaque et défense",bonus_defense:"Bonus défense",brouiller_l_ordre:"Brouiller l'ordre",
cartes:"Cartes",case:"Case",changement_congruence_deux_joueurs:"Changement congruence (deux joueurs)",changement_recompense:"Changement récompense",chez_le_lanceur:"Chez le lanceur",chez_n_importe_qui:"Chez n'importe qui",creation:"Création",defense:"Défense",don:"Don",double_tranchant:"Double-tranchant",echouee:"Echouée",echouer:"Echouer",escalier:"Escalier",gagner:"Gagner",grandes_cartes:"Grandes cartes",humeur:"Humeur",inverser:"Inverser",jeu:"Jeu",labyrinthe:"Labyrinthe",nombre_de_cases:"Nombre de cases",passer:"Passer",paysage:"Paysage",plateau:"Plateau",posee:"Posée",princesse_de_cleves:"Princesse de Clèves",recuperation:"Récuperation",reduire_nombre_requis:"Réduire nombre requis",rejouer:"Rejouer",remplacer_membre_requis:"Remplacer membre requis",remplacer_objet_requis:"Remplacer objet requis",remporter:"Remporter",renvoi:"Renvoi",repondue_correctement:"Répondue correctement",repondue_faussement:"Répondue faussement",reussie:"Réussie",specifique:"Spécifique",tentative:"Tentative",transformation:"Transformation",type:"Type",vol:"Vol",voler_recompense:"Voler récompense",zone:"Zone",0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",16:"16",73:"73",moitie:"Moitié",toutes:"Toutes",julia:"Julia",marie:"Marie",romain:"Romain",contre_le_lanceur:"Contre le lanceur",contre_n_importe_qui:"Contre n'importe qui",doubler:"Doubler",relancer:"Relancer",fi_mineur:"Fi mineur",la_majeur:"La majeur",re_mineur:"Ré mineur",animal:"Animal",chat:"Chat",combustible:"Combustible",crapauduc:"Crapauduc",electrique:"Electrique",faim:"Faim",insecte:"Insecte",marin:"Marin",metallique:"Métallique",negative:"Négative",nuit:"Nuit",potion_benefique:"Potion bénéfique",potion_benefique:"Potion malefique",respiration_sous_l_eau:"Respiration sous l'eau",russe:"Russe",soif:"Soif",toxique:"Toxique",triste:"Triste",vitesse_doublee:"Vitesse doublée",desert:"Désert",foret:"Forêt",mer:"Mer",marecages:"Marécages",monde_onirique:"Monde onirique",montagne:"Montagne",prairie:"Prairie",royaume_des_tenebres:"Royaume des ténèbres",village:"Village",ville:"Ville",zone_industrielle:"Zone industrielle"}),ApplicationConfiguration.registerModule("confrontations"),angular.module("confrontations").controller("ConfrontationsController",["$scope","$rootScope","Cartes","Confrontations",function($scope,$rootScope,Cartes,Confrontations){function startCartePerte(valeur){$scope.confrontation.display.cartes_perte=!0;var cartesJetables=0;for(var i in $scope.jeu.main)$scope.jeu.main[i].injetable||cartesJetables++;$scope.confrontation.cartes.total=Math.min(cartesJetables,valeur),0==$scope.confrontation.cartes.total&&($scope.confrontation.ready=!0);for(var i=0;i<$scope.confrontation.cartes.total;i++)$scope.confrontation.cartes.liste.push({});$scope.partie.dispo.cartes.main_jeter_attaque=!0}function startConfrontation(categorie,type,info,carteIndex,source,cible,id){$scope.confrontation.active=!0,$scope.confrontation.id=id,$scope.confrontation.categorie=categorie,$scope.confrontation.type=type,$scope.confrontation.info=info,$scope.confrontation.carteIndex=carteIndex,$scope.confrontation.source=source,$scope.confrontation.cible=cible,$scope.confrontation.ready=!1,$scope.confrontation.display={},$scope.confrontation.cartes={liste:[],filled:0,total:0};var description="",titre="";if("action"==type){var consequence=$scope.cartes[info].info.consequences[0],action=$scope.cartes[info].info.action.type;$scope.confrontation.code=$scope.cartes[info].code,console.log(action),console.log(consequence)}"attaque"===categorie&&"action"===type?($scope.confrontation.ready=!0,$scope.confrontation.display.carte_image=!0,$scope.confrontation.display.joueur_selection=!0,$scope.confrontation.display.description=!0,$scope.confrontation.display.description_type="cible_left",console.log(consequence),titre="Action : "+$scope.cartes[info].nom,"immediat"===action&&"carte"===consequence.categorie&&"defausse"===consequence.type?description=" perd "+consequence.valeur+" cartes !":"immediat"===action&&"tour"===consequence.categorie&&"passer"===consequence.type?description=" passe "+consequence.valeur+" tour !":"test"===action&&"carte"===consequence.categorie&&"vol"===consequence.type&&(description=" risque de perdre "+consequence.valeur+" cartes !")):"attaque"==categorie&&"duel"==type?(titre="Lancer un duel",$scope.confrontation.display.joueur_selection=!0,$scope.confrontation.display.duel_results=!0):"defense"===categorie?"action"===type?(titre=$scope.joueurs[source].nom+" t'attaque !","immediat"===action&&"carte"===consequence.categorie&&"defausse"===consequence.type?($scope.confrontation.display.carte_image=!0,startCartePerte(consequence.valeur),1==consequence.valeur?$scope.confrontation.description="Choisis "+consequence.valeur+" carte à défausser :":$scope.confrontation.description="Choisis "+consequence.valeur+" cartes à défausser :"):"test"===action&&"carte"===consequence.categorie&&"vol"===consequence.type?($scope.confrontation.display.test=!0,$scope.confrontation.ready=!0,$scope.confrontation.test={values:{},correct:!1},description="Quelle heure est-il ?"):"immediat"===action&&"tour"===consequence.categorie&&"passer"===consequence.type&&($scope.confrontation.display.carte_image=!0,$scope.confrontation.display.description=!0,$scope.confrontation.display.description_type="text_only",$scope.confrontation.ready=!0,description=1==consequence.valeur?"Tu passes "+consequence.valeur+" tour":"Tu passes "+consequence.valeur+" tour")):"duel"==type&&(titre="Duel lancé par "+$scope.joueurs[$scope.confrontation.source].nom,$scope.confrontation.display.duel_results=!0,$scope.confrontation.display.joueur_images=!0,$scope.confrontation.info.results_cible=[],$scope.confrontation.info.result_cible=0,$scope.partie.dispo.des.duel=3):"combat"===categorie&&($scope.confrontation.code=$scope.cartes[info].code,titre=$scope.cartes[info].nom,$scope.confrontation.display.carte_image=!0,$scope.confrontation.display.joueur_selection=!0,$scope.confrontation.display.joueur_selection_type="all"),$scope.confrontation.titre=titre,$scope.confrontation.description=description}function startDefense(){$scope.attaques.defenses.length>0&&$scope.partie.tour_joueur==$scope.joueurId&&0==$scope.partie.tour_action&&(console.log($scope.attaques.defenses),$scope.attaques.defenses[0],startConfrontation("defense",$scope.attaques.defenses[0].type,$scope.attaques.defenses[0].info,-1,$scope.attaques.defenses[0].source,$scope.attaques.defenses[0].cible,$scope.attaques.defenses[0].id),$scope.attaques.defenses.splice(0,1))}function jeterCarte(carte){var carteJetee=!1;for(var i in $scope.confrontation.cartes.liste)$scope.confrontation.cartes.liste[i].id==carte.id&&(carteJetee=!0);if(!carteJetee)for(var foundSpot=!1,i=0,cartesAJeter=$scope.confrontation.cartes.liste.length;i<cartesAJeter&&!foundSpot;)$scope.confrontation.cartes.liste[i].filled||($scope.confrontation.cartes.liste[i]=carte,$scope.confrontation.cartes.liste[i].filled=!0,foundSpot=!0,$scope.confrontation.cartes.filled++),$scope.confrontation.cartes.filled==$scope.confrontation.cartes.total&&($scope.confrontation.ready=!0),i++}function updateResult(){if("attaque"==$scope.confrontation.categorie){var result=0;for(var i in $scope.confrontation.info.results_source)result+=$scope.confrontation.info.results_source[i];$scope.confrontation.info.result_source=result%$scope.confrontation.info.modulo,console.log($scope.confrontation.info.result_source)}else{var result=0;for(var i in $scope.confrontation.info.results_cible)result+=$scope.confrontation.info.results_cible[i];$scope.confrontation.info.result_cible=result%$scope.confrontation.info.modulo,console.log($scope.confrontation.info.result_cible)}}function lanceDeDuel(result){console.log($scope.confrontation.categorie),"attaque"==$scope.confrontation.categorie?$scope.confrontation.info.results_source.length<3&&($scope.confrontation.info.results_source.push(result),updateResult(),3==$scope.confrontation.info.results_source.length&&$scope.confrontation.cible>=0&&($scope.confrontation.ready=!0)):$scope.confrontation.info.results_cible.length<3&&($scope.confrontation.info.results_cible.push(result),updateResult(),3==$scope.confrontation.info.results_cible.length&&($scope.confrontation.ready=!0))}function deplacerCartes(newPosition){for(var i in $scope.confrontation.cartes.liste)if($scope.confrontation.cartes.liste[i].filled){(function(id){console.log(id),Cartes.moveCartes({carteIds:[id],position:newPosition}).success(function(){console.log(id);for(var index=-1,j=0;index<0&&j<$scope.jeu.main.length;)$scope.jeu.main[j].id==id&&(index=j),j++;console.log(index);var carte=$scope.jeu.main[index];carte.statut={},delete carte.filled,$scope.defausses.pioche.push(carte),$scope.jeu.main.splice(index,1),$scope.focusIndex=-2}).error(function(){})})($scope.confrontation.cartes.liste[i].id)}}console.log("running confrontations controller"),$rootScope.$on("confrontations-attaque-action-start",function(event,args){startConfrontation("attaque","action",args.carte.id,args.carteIndex,$scope.joueurId)}),$rootScope.$on("confrontations-defense-start",function(event,args){startDefense()}),$rootScope.$on("confrontations-combat-start",function(event,args){startConfrontation("combat","combat",args.carte.id,args.carteIndex,$scope.joueurId)}),$rootScope.$on("confrontations-attaque-duel-start",function(event,args){if(console.log("receiving"),$scope.partie.tour_joueur==$scope.joueurId&&5==$scope.partie.tour_action){var duel={results_source:[],result_source:0,bonus_source:0,modulo:18};console.log("here"),startConfrontation("attaque","duel",duel,-1,$scope.joueurId)}}),$scope.selectCible=function(id){$scope.confrontation.cible=id,"attaque"==$scope.confrontation.categorie&&"duel"==$scope.confrontation.type&&($scope.confrontation.titre="Lancer un duel sur "+$scope.joueurs[id].nom,3==$scope.confrontation.info.results_source.length&&($scope.confrontation.ready=!0))},$scope.removeCarte=function(index){$scope.confrontation.cartes.liste[index]={},$scope.confrontation.cartes.filled--,$scope.confrontation.ready=!1},$rootScope.$on("confrontations-defense-jeter-carte",function(event,args){var carte=$scope.jeu.main[args.index];jeterCarte(carte)}),$rootScope.$on("confrontations-duel-de",function(event,args){lanceDeDuel(args.result)}),$scope.cancelConfrontation=function(){$scope.confrontation.active=!1,$scope.confrontation.cible=-1,$scope.confrontation.info=-1,$scope.confrontation.display={}},$rootScope.$on("confrontations-attaque-duel-cancel",function(event,args){$scope.cancelConfrontation()}),$scope.toursToSkip=0,$scope.lanceConfrontation=function(){var confrontation=$scope.confrontation;if("attaque"==confrontation.categorie&&"action"==confrontation.type)Cartes.moveCartes({carteIds:[confrontation.info],position:-2}).success(function(){console.log($scope.confrontation),Confrontations.add({categorie:confrontation.categorie,type:confrontation.type,info:confrontation.info,cible:confrontation.cible,source:confrontation.source}),$scope.defausses.pioche.push($scope.cartes[confrontation.info]),$scope.cancelConfrontation(),console.log($scope.confrontation.carteIndex),$scope.jeu.main.splice($scope.confrontation.carteIndex,1)}).error(function(){});else if("attaque"==confrontation.categorie&&"duel"==confrontation.type)Confrontations.add({categorie:"attaque",type:"duel",info:$scope.confrontation.info,cible:$scope.confrontation.cible,source:$scope.joueurId}).success(function(){$scope.partie.dispo.duel=!1,$scope.cancelConfrontation()}).error(function(){console.log("Sending duel did not work")});else if("defense"==confrontation.categorie){var defenseFinished=!1;if("action"==confrontation.type){var consequence=$scope.cartes[confrontation.info].info.consequences[0],action=$scope.cartes[confrontation.info].info.action.type;"immediat"==action&&"tour"===consequence.categorie&&"passer"===consequence.type?($scope.toursToSkip++,defenseFinished=!0):"immediat"==action&&"carte"===consequence.categorie&&"defausse"===consequence.type?(deplacerCartes(-2),defenseFinished=!0):"test"===action&&"carte"===consequence.categorie&&"vol"===consequence.type&&($scope.confrontation.test.completed?defenseFinished=!0:("quelle_heure_est_il"==$scope.cartes[confrontation.info].code&&("19"==$scope.confrontation.test.values.hours&&"42"==$scope.confrontation.test.values.minutes?($scope.confrontation.test.correct=!0,$scope.confrontation.description="Bonne réponse !"):($scope.confrontation.test.correct=!1,$scope.confrontation.description="Mauvaise réponse. "+$scope.joueurs[$scope.confrontation.source].nom+" te chipera une carte à son tour.")),$scope.confrontation.display.carte_image=!0,$scope.confrontation.display.description=!0,$scope.confrontation.display.test=!1,$scope.confrontation.display.description_type="text_only",$scope.confrontation.test.completed=!0))}else"duel"==confrontation.type&&(confrontation.info.completed?(deplacerCartes(confrontation.source),defenseFinished=!0):(confrontation.info.result_cible>confrontation.info.result_source?(console.log("ici !"),$scope.confrontation.display.description=!0,$scope.confrontation.display.description_type="text_only",$scope.confrontation.description="Tu as gagné ! "+$scope.joueurs[confrontation.source].nom+" te donnera 2 cartes"):confrontation.info.result_cible<confrontation.info.result_source?($scope.confrontation.ready=!1,startCartePerte(2),$scope.confrontation.description="Tu as perdu. Choisis 2 cartes à donner à "+$scope.joueurs[$scope.confrontation.source].nom+" :"):($scope.confrontation.ready=!1,startCartePerte(1),$scope.confrontation.description="Egalité. Choisis 1 carte à donner à "+$scope.joueurs[$scope.confrontation.source].nom+" :"),$scope.confrontation.display.duel_results=!1,$scope.confrontation.info.completed=!0));defenseFinished&&(Confrontations.delete({id:$scope.confrontation.id}),$scope.confrontation.active=!1,$scope.attaques.defenses.length>0?startDefense():$scope.toursToSkip>0&&(console.log($scope.toursToSkip),$scope.$emit("partie-tours-move",{numberTours:7,toursToSkip:$scope.toursToSkip-1})))}$scope.confrontation.info},$scope.loaded.confrontationsController=!0,$scope.initiateConfrontations()}]),angular.module("confrontations").directive("redConfrontationsAttaque",[function(){return{templateUrl:"modules/confrontations/views/confrontations-attaque.view.html",restrict:"E"}}]),angular.module("confrontations").directive("redConfrontationsDefense",[function(){return{templateUrl:"modules/confrontations/views/confrontations-defense.view.html",restrict:"E"}}]),angular.module("confrontations").directive("redConfrontationsDefenseAction",[function(){return{templateUrl:"modules/confrontations/views/confrontations-defense-action.view.html",restrict:"E"}}]),angular.module("confrontations").directive("redConfrontationsDefenseDuel",[function(){return{templateUrl:"modules/confrontations/views/confrontations-defense-duel.view.html",restrict:"E"}}]),angular.module("confrontations").directive("redConfrontationsAttaqueDuel",[function(){return{templateUrl:"modules/confrontations/views/confrontations-attaque-duel.view.html",restrict:"E"}}]),angular.module("confrontations").directive("redConfrontations",[function(){return{templateUrl:"modules/confrontations/views/confrontations.view.html",restrict:"E"}}]),angular.module("confrontations").factory("Confrontations",["$http","configService",function($http,configService){return{add:function(params){return $http(configService.local?{method:"GET",url:"modules/joueurs/json/joueurs.json"}:{method:"POST",url:"modules/confrontations/php/confrontations-add.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate","Content-Type":"application/json"}})},get:function(params){return $http(configService.local?{method:"GET",url:"modules/confrontations/json/confrontations.json"}:{method:"GET",url:"modules/confrontations/php/confrontations-get.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate","Content-Type":"application/json"}})},delete:function(params){return $http(configService.local?{method:"GET",url:"modules/confrontations/json/confrontations.json"}:{method:"POST",url:"modules/confrontations/php/confrontations-delete.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate","Content-Type":"application/json"}})}}}]),ApplicationConfiguration.registerModule("core"),angular.module("core").controller("CoreMenuController",["$scope","$state",function($scope,$state){$scope.goTo=function(state){$state.go(state)}}]),angular.module("core").directive("redCoreToolbar",[function(){return{templateUrl:"modules/core/views/red-core-toolbar.view.html",restrict:"E"}}]),ApplicationConfiguration.registerModule("des"),angular.module("des").controller("DesContainerController",["$scope",function($scope){function translateResult(de,result){"rhombo"===de?$scope.partie.dispo.pioches.pioche+=result:"paysage"===de?$scope.partie.dispo.plateaux.paysage=1:"labyrinthe"===de?$scope.$emit("plateaux-labyrinthe-de",{result:result}):"duel"===de&&$scope.$emit("confrontations-duel-de",{result:result})}var des_size={rhombo:6,paysage:12,echecs:6,duel:20,labyrinthe:4},des_options={rhombo:[0,0,0,1,1,2],paysage:[2,3,4,5,5,7,7,12,16,73],echecs:["Tour","Dame","Dada","Fou","Roi","Stop"],duel:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],labyrinthe:[1,2,3,4]};$scope.lanceDe=function(de){var rand=Math.floor(Math.random()*des_size[de]);$scope.jeu.de=des_options[de][rand],$scope.partie.dispo.des[de]--,translateResult(de,des_options[de][rand])},$scope.add100DeLabyrinthe=function(){$scope.partie.dispo.des.labyrinthe+=100}}]),angular.module("des").directive("redDesContainer",[function(){return{templateUrl:"modules/des/views/des-container.view.html",restrict:"E"}}]),ApplicationConfiguration.registerModule("jeu"),angular.module("jeu").controller("JeuContainerController",["$scope",function($scope){$scope.actionsDisponibles={action:!0,nextAction:!0},$scope.focusedTab=0,$scope.tabs=[{id:"cartes_ouvertes",nom:"Cartes ouvertes",style:"{'background-color':'#fff8e8'}"},{id:"objets_hors_pioche",nom:"Objets hors pioche",style:"{'background-color':'#fff5f5'}"},{id:"humeurs",nom:"Humeurs",style:"{'background-color':'#fff0ff'}"},{id:"missions",nom:"Missions",style:"{'background-color':'#e8fbff'}"},{id:"grande_cartes",nom:"Grandes cartes",style:"{'background-color':'#efe8ff'}"}],$scope.changeTab=function(index){$scope.focusedTab=index,console.log($scope.tabStyles)},$scope.view="cartes",$scope.changeView=function(index){$scope.view=index},$scope.ecrireNotes=function(){"notes"!==$scope.view?$scope.view="notes":$scope.view="cartes"}}]),angular.module("jeu").controller("JeuGrandesCartesController",["$scope",function($scope){$scope.grandesCartes=[{code:"quart_de_singe"},{code:"interlude_musical"},{code:"orque_casque_anti_bruit"},{code:"elephant_parapluie"},{code:"crachat_de_lama"},{code:"fumee_de_cigarettes"}]}]),angular.module("jeu").controller("JeuHorsPiocheController",["$scope",function($scope){}]),angular.module("jeu").controller("JeuMainController",["$scope","$rootScope","$timeout","Cartes",function($scope,$rootScope,$timeout,Cartes){$scope.focusIndex=-2,$scope.focusCarte=function(index){index==$scope.focusIndex?$scope.focusIndex=-2:$scope.focusIndex=index},$scope.utiliserCarte=function(index){var carte=$scope.jeu.main[index];"action"==carte.categorie&&$scope.$emit("confrontations-attaque-action-start",{carte:carte,carteIndex:index})},$scope.ouvrirCarte=function(index){var carte=$scope.jeu.main[index];carte.statut.ouverte=!0,Cartes.changementMain({carteId:$scope.jeu.main[index].id,statut:carte.statut}).success(function(){$timeout(function(){$scope.jeu.ouvertes.push(carte)},250),$scope.jeu.main.splice(index,1),$scope.focusIndex=-2}).error(function(){})},$scope.jeterCarte=function(index){Cartes.moveCartes({carteIds:[$scope.jeu.main[index].id],position:-2}).success(function(){var carte=$scope.jeu.main[index];carte.statut={},$scope.defausses.pioche.push(carte),$scope.jeu.main.splice(index,1),$scope.focusIndex=-2}).error(function(){})},$scope.jeterAttaqueCarte=function(index){$scope.$emit("confrontations-defense-jeter-carte",{index:index})},$scope.jeterCarteInterface=function(index){$scope.$emit("cartes-jeter-id",{carte:$scope.jeu.main[index]})},$rootScope.$on("jeu-main-jeter",function(event,args){console.log(args.cartes);var carteIds=[];for(var i in args.cartes)carteIds.push(args.cartes[i].id);console.log(carteIds),Cartes.moveCartes({carteIds:carteIds,position:-2}).success(function(){$scope.$emit("jeu-main-jeter-callback",{success:!0});for(var i in args.cartes){for(var id=args.cartes[i].id,index=-1,j=0;index<0&&j<$scope.jeu.main.length;)$scope.jeu.main[j].id==id&&(index=j),j++;var carte=$scope.jeu.main[index];carte.statut={},$scope.defausses.pioche.push(carte),$scope.jeu.main.splice(index,1)}$scope.focusIndex=-2}).error(function(){$scope.$emit("jeu-main-jeter-callback",{success:!1})})}),$rootScope.$on("cartes-jeter-start",function(event,args){$scope.jeterDispo=!0,$scope.jeterBoutonTitre=args.boutonName;var nombreDeCartes=$scope.jeu.main.length;$scope.$emit("cartes-jeter-start-callback",{nombreDeCartes:nombreDeCartes})}),$rootScope.$on("cartes-jeter-notfull",function(event,args){$scope.jeterDispo=!0}),$rootScope.$on("cartes-jeter-full",function(event,args){$scope.jeterDispo=!1})}]),angular.module("jeu").controller("JeuMissionsController",["$scope",function($scope){$scope.mission=$scope.jeu.missions[0],$scope.updateEtape=function(etape){$scope.etape=etape,$scope.etapeTitre=(etape+1).toString()+". ","apporter_des_cartes"==$scope.mission.info.etapes[etape].categorie?$scope.etapeTitre+="Apporter ces objets en case "+$scope.mission.info.etapes[etape].case:"reunir_des_cartes"==$scope.mission.info.etapes[etape].categorie?$scope.etapeTitre+="Réunir ces objets":"remporter_des_duels"==$scope.mission.info.etapes[etape].categorie?$scope.etapeTitre+="Vaincre ces joueurs en duel":"visiter_des_cases"==$scope.mission.info.etapes[etape].categorie?$scope.etapeTitre+="Visiter ces cases":"visiter_des_zones"==$scope.mission.info.etapes[etape].categorie&&($scope.etapeTitre+="Visiter ces zones")},void 0!==$scope.mission.info&&$scope.updateEtape(0)}]),angular.module("jeu").controller("JeuOuvertesController",["$scope","Cartes",function($scope,Cartes){$scope.focusIndex=-2,$scope.focusCarte=function(index){index==$scope.focusIndex?$scope.focusIndex=-2:$scope.focusIndex=index},$scope.jeterCarte=function(index){Cartes.moveCartes({carteIds:[$scope.jeu.ouvertes[index].id],position:-2}).success(function(){var carte=$scope.jeu.ouvertes[index];carte.main={},$scope.defausses.pioche.push(carte),$scope.jeu.ouvertes.splice(index,1),$scope.focusIndex=-2}).error(function(){})},$scope.utiliserCarte=function(index){var carte=$scope.jeu.ouvertes[index];console.log(index),"combat"==carte.categorie&&$scope.$emit("confrontations-combat-start",{carte:carte,carteIndex:index})}}]),angular.module("jeu").directive("redJeuContainer",[function(){return{templateUrl:"modules/jeu/views/jeu-container.view.html",restrict:"E"}}]),angular.module("jeu").directive("redJeuMain",[function(){return{templateUrl:"modules/jeu/views/jeu-main.view.html",restrict:"E"}}]),angular.module("jeu").directive("redJeuOuvertes",[function(){return{templateUrl:"modules/jeu/views/jeu-ouvertes.view.html",restrict:"E"}}]),angular.module("jeu").directive("redJeuMission",[function(){return{templateUrl:"modules/jeu/views/jeu-mission.view.html",restrict:"E"}}]),angular.module("jeu").directive("redJeuGrandesCartes",[function(){return{templateUrl:"modules/jeu/views/jeu-grandes-cartes.view.html",restrict:"E"}}]),angular.module("jeu").directive("redJeuHorsPioche",[function(){return{templateUrl:"modules/jeu/views/jeu-hors-pioche.view.html",restrict:"E"}}]),ApplicationConfiguration.registerModule("joueurs"),angular.module("joueurs").controller("JoueursRecapController",["$scope",function($scope){console.log($scope.autresJoueurs),$scope.joueurLeftStyle="{'background-color': '"+$scope.joueurs[$scope.autresJoueurs[0]].backgroundColor+"'}",$scope.joueurRightStyle="{'background-color': '"+$scope.joueurs[$scope.autresJoueurs[1]].backgroundColor+"'}"}]),angular.module("joueurs").directive("redJoueursRecapLeft",[function(){return{templateUrl:"modules/joueurs/views/joueurs-recap-left.view.html",restrict:"E"}}]),angular.module("joueurs").directive("redJoueursRecapRight",[function(){return{templateUrl:"modules/joueurs/views/joueurs-recap-right.view.html",restrict:"E"}}]),angular.module("joueurs").factory("Joueurs",["$http","configService",function($http,configService){return{getJoueurs:function(){return $http(configService.local?{method:"GET",url:"modules/joueurs/json/joueurs.json"}:{method:"GET",url:"modules/joueurs/php/joueurs.php",headers:{"Cache-Control":"no-cache"}})},movePion:function(params){return $http(configService.local?{method:"GET",url:"modules/joueurs/json/joueurs.json"}:{method:"POST",url:"modules/joueurs/php/joueurs-pion-move.php",params:params,headers:{"Cache-Control":"no-cache"}})}}}]),ApplicationConfiguration.registerModule("partie"),angular.module("partie").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("partie",{url:"/partie/:joueur",templateUrl:"modules/partie/views/partie-general.view.html"})}]),angular.module("partie").controller("PartieGeneralController",["$scope","$state","$stateParams","Cartes","Objets","Partie","Joueurs","Confrontations",function($scope,$state,$stateParams,Cartes,Objets,Partie,Joueurs,Confrontations){function getCartes(){Cartes.getCartes().success(function(response){$scope.cartes={};for(var i in response){var carte=response[i];$scope.cartes[carte.id]=carte,"pioche"==carte.pile?carte.position==-2?$scope.defausses.pioche.push(carte):carte.position==-1?$scope.pioches.pioche.push(carte):carte.position==$scope.joueurId?carte.statut.ouverte?$scope.jeu.ouvertes.push(carte):$scope.jeu.main.push(carte):carte.statut.ouverte&&$scope.joueurs[carte.position].ouvertes.push(carte):"missions"==carte.pile&&(carte.position==-1&&$scope.pioches.missions.push(carte),carte.position==$scope.joueurId&&(console.log("and joueur"),$scope.jeu.missions.push(carte)))}$scope.loaded.cartes=!0,$scope.initiateConfrontations()}).error(function(response){console.log("Error while trying to get cartes")})}$scope.loaded={partie:!1,cartes:!1,joueurs:!1,defenses:!1,confrontationsController:!1},$scope.joueurId=parseInt($stateParams.joueur),$scope.attaques={defenses:[],recompenses:[]},$scope.defense={},$scope.duel={},$scope.initiateConfrontations=function(){$scope.loaded.partie&&$scope.loaded.cartes&&$scope.loaded.confrontationsController&&(console.log("inside"),$scope.partie.tour_joueur==$scope.joueurId&&0==$scope.partie.tour_action?Confrontations.get({joueurId:$scope.joueurId}).success(function(response){for(var i in response)"attaque"==response[i].categorie?$scope.attaques.defenses.push(response[i]):"recompense"==response[i].categorie&&$scope.attaques.recompenses.push(response[i]);$scope.loaded.defenses=!0,$scope.$emit("confrontations-defense-start",{})}):$scope.partie.tour_joueur==$scope.joueurId&&5==$scope.partie.tour_action&&(console.log("emitting"),$scope.$emit("confrontations-attaque-duel-start",{})),$scope.loaded.defenses=!0)},$scope.resetDispos=function(){$scope.partie.dispo={des:{rhombo:0,paysage:0,duel:0,echecs:0,labyrinthe:0},pioches:{pioche:0,questions:0,humeurs:0,missions:0},cartes:{ouvertures:!1,main_jeter:!1,ouvertes_jeter:!1,utiliser:!1},plateaux:{paysage:0,layrinthe:0},duel:!1,action_de_case:!1}},Partie.getPartie().success(function(response){$scope.partie={tour_joueur:response[0].tour_joueur,tour_action:response[0].tour_action,tour_skip:response[0].tour_skip,tonalite:response[0].tonalite,temps:response[0].temps,dispo:response[0].dispo,positionCouronnes:response[0].positionCouronnes,valiseNonMaterialisee:response[0].valiseNonMaterialisee},$scope.partie.tour_joueur!==$scope.joueurId&&$scope.resetDispos(),$scope.loaded.partie=!0,$scope.initiateConfrontations(),$scope.$emit("partie-general-partie-loaded",{})}),$scope.jeu={},$scope.jeu.de=-1,$scope.jeu.main=[],$scope.jeu.ouvertes=[],$scope.jeu.missions=[],$scope.objets={},Objets.getObjets().success(function(responseObjets){for(var i in responseObjets)void 0===$scope.objets[responseObjets[i].code]&&($scope.objets[responseObjets[i].code]=responseObjets[i]);console.log($scope.cartesTable)}),$scope.joueurs={0:{},1:{},2:{}},$scope.joueur={},Joueurs.getJoueurs().success(function(response){var joueur=response[$scope.joueurId];$scope.joueur={id:joueur.id,nom:joueur.nom,diable:joueur.diable,belette:joueur.belette,notes_titre:joueur.notes_titre,notes:joueur.notes},$scope.joueurs[0]=response[0],$scope.joueurs[1]=response[1],$scope.joueurs[2]=response[2];for(var i in $scope.joueurs)$scope.joueurs[i].ouvertes=[];getCartes(),$scope.$emit("partie-general-joueurs-loaded")}),$scope.autresJoueurs=[($scope.joueurId+2)%3,($scope.joueurId+1)%3],$scope.joueurLeft=($scope.joueurId+2)%3,$scope.joueurRight=($scope.joueurId+1)%3,$scope.pioches={},$scope.pioches.pioche=[],$scope.pioches.missions=[],$scope.defausses={},$scope.defausses.pioche=[],$scope.plateau=-1,$scope.plateaux=[{id:"paysage",nom:"Plateau Paysage"},{id:"labyrinthe",nom:"Plateau Labyrinthe"},{id:"escalier",nom:"Plateau Escalier"}],$scope.goToPlateau=function(plateauId){$scope.plateau==plateauId?$scope.plateau=-1:$scope.plateau=plateauId},$scope.attaque={},$scope.confrontation={},$scope.actionsDisponibles={}}]),angular.module("partie").controller("PartieTourController",["$scope","$rootScope","Partie",function($scope,$rootScope,Partie){function startAction(tourJoueur,tourAction){$scope.jeu.de=-1,$scope.resetDispos(),tourJoueur==$scope.joueurId&&(1==tourAction?($scope.partie.dispo.cartes.ouvertures=!0,$scope.partie.dispo.cartes.ouvertes_jeter=!0):2==tourAction?($scope.partie.dispo.pioches.pioche++,$scope.partie.dispo.des.rhombo++,$scope.partie.dispo.cartes.main_jeter=!0):3==tourAction?("paysage"===$scope.joueurs[$scope.joueurId].pions[0].plateau?$scope.partie.dispo.des.paysage=1:"labyrinthe"===$scope.joueurs[$scope.joueurId].pions[0].plateau&&($scope.partie.dispo.des.labyrinthe=4),console.log($scope.joueurs)):4==tourAction?$scope.partie.dispo.action_de_case=!0:5==tourAction?($scope.partie.dispo.duel=!0,$scope.partie.dispo.des.duel=3):6==tourAction&&($scope.partie.dispo.cartes.utiliser=!0,$scope.$emit("confrontations-attaque-duel-cancel",{}),0===$scope.jeu.missions.length&&($scope.partie.dispo.pioches.missions=1)))}function moveTour(numberTours,skipTours){$scope.actionsDisponibles.nextAction=!1,Partie.getPartie().success(function(response){if($scope.partie.tour_joueur==response[0].tour_joueur&&$scope.partie.tour_action==response[0].tour_action){var tourJoueur,tourAction,tourSkip;if(tourSkip=$scope.partie.tour_skip,tourSkip[$scope.joueurId]+=skipTours,$scope.partie.tour_action+numberTours>6){var joueurFound=!1;for(tourAction=0,tourJoueur=($scope.partie.tour_joueur+1)%3;!joueurFound;)tourSkip[tourJoueur]>0?(tourSkip[tourJoueur]--,tourJoueur=(tourJoueur+1)%3):joueurFound=!0}else tourAction=$scope.partie.tour_action+numberTours,tourJoueur=$scope.partie.tour_joueur;startAction(tourJoueur,tourAction),Partie.changeTour({tour_joueur:tourJoueur,tour_action:tourAction,tour_skip:JSON.stringify(tourSkip),dispo:$scope.partie.dispo}).success(function(){$scope.partie.tour_joueur=tourJoueur,$scope.partie.tour_action=tourAction,$scope.actionsDisponibles.nextAction=!0,$scope.partie.tour_joueur==$scope.joueurId&&5==$scope.partie.tour_action&&$scope.$emit("action-case-start",{}),$scope.partie.tour_joueur==$scope.joueurId&&5==$scope.partie.tour_action&&$scope.$emit("confrontations-attaque-duel-start",{})}).error(function(){$scope.actionsDisponibles.nextAction=!0})}else $scope.partie={tour_joueur:response[0].tour_joueur,tour_action:response[0].tour_action,tour_skip:response[0].tour_skip,tonalite:response[0].tonalite,temps:response[0].temps,dispo:response[0].dispo},$scope.jeu.de=-1,$scope.actionsDisponibles.nextAction=!0}).error(function(){
$scope.actionsDisponibles.nextAction=!0})}$scope.actionsDisponibles.nextAction=!0,$scope.tourActionNames={0:"Defense",1:"Ouverture",2:"Piochement",3:"Déplacement",4:"Action de case",5:"Duel",6:"Actions"},$scope.nextAction=function(){moveTour(1,0)},$rootScope.$on("partie-tours-move",function(event,args){moveTour(args.numberTours,args.toursToSkip)})}]),angular.module("partie").factory("Partie",["$http","configService",function($http,configService){return{getPartie:function(){return $http(configService.local?{method:"GET",url:"modules/partie/json/partie.json"}:{method:"GET",url:"modules/partie/php/partie.php",headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},changeTour:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/partie/php/partie-tour-change.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},changeCouronnes:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/partie/php/partie-couronnes-change.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})},ajouterObjetValise:function(params){return $http(configService.local?{method:"GET",url:"modules/cartes/json/cartes.json"}:{method:"POST",url:"modules/partie/php/partie-ajouter-objet-valise.php",params:params,headers:{"Cache-Control":"max-age=0, no-cache, no-store, must-revalidate"}})}}}]),ApplicationConfiguration.registerModule("plateaux"),angular.module("plateaux").controller("PlateauxActionCaseController",["$scope","$rootScope","$http","$timeout","Partie","Cartes","Objets","Confrontations",function($scope,$rootScope,$http,$timeout,Partie,Cartes,Objets,Confrontations){$scope.startActionCase=function(categorie,numero){if($scope.actionCase.categorie=categorie,$scope.actionCase.numero=$scope.joueurs[$scope.joueurId].pions[0].case,$scope.actionCaseDisplay={description:!0,image:!1,perteCartes:!1},$scope.actionCase.phase++,console.log(numero),1===$scope.actionCase.phase){if("Hub"===numero){var origine=$scope.joueurs[$scope.joueurId].pions[0].plateau;"labyrinthe"===origine?$scope.actionCase.destination="paysage":"paysage"===origine&&($scope.actionCase.destination="labyrinthe"),$scope.actionCase.description="Veux-tu prendre l'avion vers le plateau-"+$scope.actionCase.destination+" ?",$scope.bouton1="Oui",$scope.bouton2="Non",console.log("ici")}}else if(2===$scope.actionCase.phase)"Hub"===numero&&($scope.actionCase.description="Il te faut un passeport",$scope.bouton1="OK",$scope.bouton2="Annuler");else if(3===$scope.actionCase.phase)"Hub"===numero&&($scope.okButtonDisabled=!0,$scope.valiseNonMaterialiseeIndex=0,$scope.actionCaseDisplay.description=!1,$scope.valiseNonMaterialisee=$scope.partie.valiseNonMaterialisee,0===$scope.valiseNonMaterialisee.length&&($scope.actionCase.vnmCorrect=!0),$scope.actionCase.valiseNonMaterialisee=[],$scope.actionCase.description="Bon voyage ! N'oublie pas de correctement préparer ta valise non-matérialisée.",$scope.bouton1="OK",$scope.bouton2="");else if(4===$scope.actionCase.phase)if(console.log("starting phase 4"),"Hub"===numero&&$scope.actionCase.vnmCorrect){var valiseNonMaterialisee=$scope.partie.valiseNonMaterialisee;valiseNonMaterialisee.push($scope.actionCase.nouvelObjet),console.log(valiseNonMaterialisee),Partie.ajouterObjetValise({valiseNonMaterialisee:JSON.stringify(valiseNonMaterialisee)}).success(function(){$scope.partie.valiseNonMaterialisee=valiseNonMaterialisee;for(var i in $scope.autresJoueurs)Confrontations.add({categorie:"news",type:"valiseNonMaterialiseeSuccess",info:$scope.partie.valiseNonMaterialisee.length-1,cible:$scope.autresJoueurs[i],source:$scope.joueurId})}).error(function(){console.log("error trying to save valise non matérialisée")}),$scope.actionCase.valiseNonMaterialisee=void 0,$scope.actionCase.description="Tu pioches deux cartes.",$scope.partie.dispo.pioches.pioche+=2,$scope.bouton1="OK",$scope.bouton2=""}else{for(var i in $scope.autresJoueurs)Confrontations.add({categorie:"news",type:"valiseNonMaterialiseeFailure",info:$scope.actionCase.valiseNonMaterialisee.length-1,cible:$scope.autresJoueurs[i],source:$scope.joueurId});$scope.okButtonDisabled=!0,$rootScope.$on("cartes-jeter-full",function(event,args){$scope.okButtonDisabled=!1,$scope.actionCase.cartesDefausse=args.cartes}),$scope.actionCaseDisplay.description=!1,$scope.actionCaseDisplay.perteCartes=!0,$scope.actionCase.valiseNonMaterialisee=void 0,$scope.bouton1="OK",$scope.bouton2="",$rootScope.$on("cartes-jeter-notfull",function(event,args){$scope.okButtonDisabled=!0})}else if(5===$scope.actionCase.phase&&"Hub"===numero){var startHubPhase5=function(){$scope.buttonsHidden=!0,$scope.actionCaseDisplay.description=!1,$scope.actionCaseDisplay.image=!0,$scope.actionCase.description="Bon vol vers le plateau-"+$scope.actionCase.destination+" !",$scope.actionCase.image="modules/plateaux/img/avion.png",$timeout(function(){$scope.actionCase.phase=0,$scope.actionsCase.action=!1,$scope.$emit("plateaux-move-pion",{plateau:$scope.actionCase.destination,case:"Hub"}),"labyrinthe"===$scope.actionCase.destination&&1!==$scope.plateau?$scope.goToPlateau(1):"paysage"===$scope.actionCase.destination&&0!==$scope.plateau&&$scope.goToPlateau(0)},2e3)};void 0!==$scope.actionCase.cartesDefausse&&0!==$scope.actionCase.cartesDefausse.length?(console.log($scope.actionCase.cartesDefausse),$scope.$emit("jeu-main-jeter",{cartes:$scope.actionCase.cartesDefausse}),$rootScope.$on("jeu-main-jeter-callback",function(event,args){args.success?startHubPhase5():($scope.actionCase.phase-=2,$scope.startActionCase("action","Hub"))})):startHubPhase5()}},$scope.actionCase={phase:0};var cases={};$http({method:"GET",url:"modules/plateaux/json/plateaux-paysage.json"}).success(function(response){for(var i in response)for(var j in response[i].colonnes)void 0===cases[response[i].colonnes[j].numero]&&(cases[response[i].colonnes[j].numero]=response[i].colonnes[j]);$scope.actionsCase={achat:cases[$scope.joueurs[$scope.joueurId].pions[0].case].achat,action:cases[$scope.joueurs[$scope.joueurId].pions[0].case].action,question:cases[$scope.joueurs[$scope.joueurId].pions[0].case].question}}),$scope.cancelActionCase=function(){$scope.actionCase.phase=0},$scope.nouvelObjet=function(){$scope.okButtonDisabled=!1},$scope.ajouteValise=function(index){$scope.valiseNonMaterialisee.length===$scope.actionCase.valiseNonMaterialisee.length&&$scope.valiseNonMaterialisee[$scope.valiseNonMaterialiseeIndex]==$scope.actionCase.valiseNonMaterialisee[$scope.valiseNonMaterialiseeIndex]?$scope.actionCase.vnmCorrect=!0:$scope.valiseNonMaterialisee[$scope.valiseNonMaterialiseeIndex]!==$scope.actionCase.valiseNonMaterialisee[$scope.valiseNonMaterialiseeIndex]&&($scope.actionCase.vnmCorrect=!1,$scope.okButtonDisabled=!1),$scope.valiseNonMaterialiseeIndex++}}]),angular.module("plateaux").controller("PlateauxGeneralController",["$scope","$rootScope","$state","Joueurs",function($scope,$rootScope,$state,Joueurs){function movePion(numero,plateau){var previousCase=$scope.joueurs[$scope.joueurId].pions[0].case,previousPlateau=$scope.joueurs[$scope.joueurId].pions[0].plateau,newPions=[];$.each($scope.joueurs[$scope.joueurId].pions,function(i,obj){newPions.push($.extend(!0,{},obj))}),newPions[0].case=numero,newPions[0].plateau=plateau,Joueurs.movePion({pions:JSON.stringify(newPions),joueurId:$scope.joueurId}).success(function(){$scope.joueurs[$scope.joueurId].pions[0].case=numero,$scope.joueurs[$scope.joueurId].pions[0].plateau=plateau,$scope.$emit("plateaux-move-pion-callback",{plateau:plateau,previousPlateau:previousPlateau,case:numero,previousCase:previousCase})}).error(function(error){console.log("napapu sauver pion"),console.log(error)})}$rootScope.$on("plateaux-move-pion",function(event,args){movePion(args.case,args.plateau)})}]),angular.module("plateaux").controller("PlateauxLabyrintheController",["$scope","$rootScope","$timeout","$http","Partie","Joueurs",function($scope,$rootScope,$timeout,$http,Partie,Joueurs){function setPositionCouronne(i){var sectionsCouronne=$scope.plateauLabyrinthe[i].length,angleBase=360/sectionsCouronne;for(var j in $scope.plateauLabyrinthe[i]){var position=(($scope.plateauLabyrinthe[i][j].position+$scope.positionCouronnes[i])%sectionsCouronne+sectionsCouronne)%sectionsCouronne;$scope.plateauLabyrinthe[i][j].angle=angleBase*($scope.plateauLabyrinthe[i][j].position+$scope.positionCouronnes[i]),$scope.plateauLabyrinthe[i][j].x=positionsCases[i][position].x,$scope.plateauLabyrinthe[i][j].y=positionsCases[i][position].y,$scope.plateauLabyrinthe[i][j].opacity=1}}function getCoordinates(numero){for(var coordinates={couronne:-1,position:-1},i=0;i<$scope.plateauLabyrinthe.length;i++)for(var j=0;j<$scope.plateauLabyrinthe[i].length;j++)$scope.plateauLabyrinthe[i][j].numero==numero&&(coordinates={couronne:i,position:j});return coordinates}function highlightCase(i,j){$timeout(function(){$scope.plateauLabyrinthe[i][j].opacity=.3,$timeout(function(){$scope.plateauLabyrinthe[i][j].opacity=1,$timeout(function(){$scope.plateauLabyrinthe[i][j].opacity=.3,$timeout(function(){$scope.plateauLabyrinthe[i][j].opacity=1},500)},500)},500)},500)}function updatePionsStyles(couronne,position){var positionsPions=[[[{left:46,top:46}],[{left:22,top:45},{left:65,top:24}],[{left:22,top:45},{left:65,top:24},{left:57,top:69}]],[[{left:42,top:46}],[{left:78,top:21},{left:19,top:80}],[{left:78,top:21},{left:19,top:80},{left:42,top:46}]],[[{left:32,top:57}],[{left:50,top:23},{left:19,top:80}],[{left:32,top:57},{left:50,top:23},{left:23,top:94}]],[[{left:24,top:38}],[{left:29,top:18},{left:19,top:56}],[{left:32,top:57},{left:42,top:19},{left:9,top:32}]],[[{left:19,top:18}],[{left:37,top:11},{left:5,top:25}],[{left:13,top:27},{left:37,top:19},{left:4,top:4}]]],nombrePions=$scope.plateauLabyrinthe[couronne][position].joueurs.length;$scope.plateauLabyrinthe[couronne][position].pionsStyles=positionsPions[couronne][nombrePions-1]}function addPionToCase(caseId,joueurId){for(var i=0;i<$scope.plateauLabyrinthe.length;i++)for(var j=0;j<$scope.plateauLabyrinthe[i].length;j++)$scope.plateauLabyrinthe[i][j].numero==caseId&&($scope.plateauLabyrinthe[i][j].joueurs.push(joueurId),$scope.plateauLabyrinthe[i][j].joueursNumber++,updatePionsStyles(i,j))}function removePionFromCase(caseId,joueurId){console.log(caseId);for(var i=0;i<$scope.plateauLabyrinthe.length;i++)for(var j=0;j<$scope.plateauLabyrinthe[i].length;j++)if($scope.plateauLabyrinthe[i][j].numero==caseId){var index=$scope.plateauLabyrinthe[i][j].joueurs.indexOf(joueurId);index>=0&&($scope.plateauLabyrinthe[i][j].joueurs.splice(index,1),$scope.plateauLabyrinthe[i][j].joueursNumber--,updatePionsStyles(i,j))}}function findSection(position,couronne){if(3!==couronne){var sectionsCouronne=[0,2,2,3,8],sectionCouronne=sectionsCouronne[couronne];return 4!==couronne&&(position=(position+1)%$scope.plateauLabyrinthe[couronne].length),Math.floor(position/sectionCouronne)}return position<2?0:position<5?1:position<7?2:position<10?3:position<13?4:5}function rechercheCasesDisponibles(position,couronne){if($scope.plateauLabyrintheTourDeJeu.casesDisponibles=[],couronne>0)for(var currentSection=findSection(position,couronne),i=position-$scope.plateauLabyrintheTourDeJeu.de;i<=position+$scope.plateauLabyrintheTourDeJeu.de;i++){var i2=(i+$scope.plateauLabyrinthe[couronne].length)%$scope.plateauLabyrinthe[couronne].length;findSection(i2,couronne)===currentSection&&$scope.plateauLabyrintheTourDeJeu.casesDisponibles.push($scope.plateauLabyrinthe[couronne][i2].numero)}}function rechercheMonteeDisponible(position,couronne){$scope.plateauLabyrintheTourDeJeu.monteeDisponible=[];var sectionsCouronne=$scope.plateauLabyrinthe[couronne].length,positionReelle=((position+$scope.positionCouronnes[couronne])%sectionsCouronne+sectionsCouronne)%sectionsCouronne,cle=$scope.plateauLabyrinthe[couronne][position].cle;if(void 0!==cle){if(0!==couronne){var sectionsCouronneSuperieure=$scope.plateauLabyrinthe[couronne-1].length,positionSuperieure=((Math.floor(positionReelle/2)-$scope.positionCouronnes[couronne-1])%sectionsCouronneSuperieure+sectionsCouronneSuperieure)%sectionsCouronneSuperieure;cle===$scope.plateauLabyrinthe[couronne-1][positionSuperieure].cle&&$scope.plateauLabyrintheTourDeJeu.monteeDisponible.push($scope.joueurs[$scope.joueurId].pions[0].case)}if(4!==couronne){var sectionsCouronneInferieure=$scope.plateauLabyrinthe[couronne+1].length,positionInferieure1=((2*positionReelle-$scope.positionCouronnes[couronne+1])%sectionsCouronneInferieure+sectionsCouronneInferieure)%sectionsCouronneInferieure,positionInferieure2=(positionInferieure1+1)%sectionsCouronneInferieure;cle===$scope.plateauLabyrinthe[couronne+1][positionInferieure1].cle?$scope.plateauLabyrintheTourDeJeu.monteeDisponible.push($scope.plateauLabyrinthe[couronne+1][positionInferieure1].numero):cle===$scope.plateauLabyrinthe[couronne+1][positionInferieure2].cle&&$scope.plateauLabyrintheTourDeJeu.monteeDisponible.push($scope.plateauLabyrinthe[couronne+1][positionInferieure2].numero)}}}$scope.plateauLabyrinthe=[[{numero:"Hub interplanetaire",cle:"jaune",position:0}],[{numero:56,cle:"jaune",position:0},{numero:57,cle:"rouge_fonce",position:1},{numero:58,cle:"bleu",position:2},{numero:59,cle:"orange",position:3}],[{numero:48,cle:"bleu",position:0},{numero:49,cle:"bleu_fonce",position:1},{numero:50,cle:"rose_pale",position:2},{numero:51,cle:"vert",position:3},{numero:52,cle:"orange",position:4},{numero:53,cle:"rouge_fonce",position:5},{numero:54,cle:"rose_fonce",position:6},{numero:55,cle:"violet",position:7}],[{numero:32,cle:"rose",position:0},{numero:33,cle:"rose_pale",position:1},{numero:34,cle:"jaune_fonce",position:2},{numero:35,position:3},{numero:36,cle:"marron",position:4},{numero:37,cle:"vert_pale",position:5},{numero:38,cle:"rose_fonce",position:6},{numero:39,cle:"vert",position:7},{numero:40,position:8},{numero:41,cle:"gris",position:9},{numero:42,cle:"bleu_fonce",position:10},{numero:43,position:11},{numero:44,cle:"vert_fonce",position:12},{numero:45,cle:"rouge",position:13},{numero:46,position:14},{numero:47,cle:"violet",position:15}],[{numero:"Hub",position:0,action:"Hub"},{numero:1,position:1},{numero:2,position:2},{numero:3,position:3},{numero:4,position:4},{numero:5,position:5},{numero:6,position:6},{numero:7,cle:"jaune_fonce",position:7},{numero:8,cle:"vert_pale",position:8},{numero:9,position:9},{numero:10,position:10},{numero:11,position:11},{numero:12,position:12},{numero:13,position:13},{numero:14,position:14},{numero:15,cle:"rose",position:15},{numero:16,cle:"rouge",position:16},{numero:17,position:17},{numero:18,position:18},{numero:19,position:19},{numero:20,position:20},{numero:21,position:21},{numero:22,position:22},{numero:23,cle:"gris",position:23},{numero:24,cle:"marron",position:24},{numero:25,position:25},{numero:26,position:26},{numero:27,position:27},{numero:28,position:28},{numero:29,position:29},{numero:30,position:30},{numero:31,cle:"vert_fonce",position:31}]];for(var i in $scope.plateauLabyrinthe)for(var j in $scope.plateauLabyrinthe[i])$scope.plateauLabyrinthe[i][j].joueurs=[],$scope.plateauLabyrinthe[i][j].pionsStyles=[],$scope.plateauLabyrinthe[i][j].joueursNumber=0;var positionsCases=[[],[{x:-85,y:-85},{x:0,y:-85},{x:0,y:0},{x:-85,y:0}],[{x:-133,y:-89},{x:-70,y:-145},{x:11,y:-141},{x:66,y:-79},{x:62,y:0},{x:0,y:57},{x:-79,y:53},{x:-137,y:-9}],[{x:-191,y:-69},{x:-166,y:-126},{x:-118,y:-171},{x:-60,y:-193},{x:3,y:-191},{x:61,y:-166},{x:104,y:-118},{x:126,y:-59},{x:124,y:0},{x:100,y:57},{x:51,y:103},{x:-7,y:125},{x:-68,y:124},{x:-126,y:99},{x:-171,y:49},{x:-193,y:-9}],[{x:-133,y:-89},{x:-70,y:-145},{x:11,y:-140},{x:66,y:-79},{x:62,y:0},{x:0,y:57},{x:-79,y:53},{x:-137,y:-9},{x:-133,y:-89},{x:-70,y:-145},{x:11,y:-140},{x:66,y:-79},{x:62,y:0},{x:0,y:57},{x:-79,y:53},{x:-137,y:-9},{x:-133,y:-89},{x:-70,y:-145},{x:11,y:-140},{x:66,y:-79},{x:62,y:0},{x:0,y:57},{x:-79,y:53},{x:-137,y:-9},{x:-133,y:-89},{x:-70,y:-145},{x:11,y:-140},{x:66,y:-79},{x:62,y:0},{x:0,y:57},{x:-79,y:53},{x:-137,y:-9}]],positionsCases2=[[],[{x:-120,y:-120},{x:0,y:-120},{x:0,y:0},{x:-120,y:0}],[{x:-184.5,y:-130},{x:-100,y:-207},{x:15,y:-200},{x:92,y:-115},{x:85,y:0},{x:0,y:75},{x:-116,y:68.5},{x:-191,y:-15.5}],[{x:-249,y:-94},{x:-215,y:-171},{x:-155,y:-229.5},{x:-78,y:-259.5},{x:6,y:-257.5},{x:84,y:-224},{x:142.5,y:-163.5},{x:173,y:-85},{x:171,y:0},{x:137,y:76.5},{x:76,y:134.5},{x:-1.5,y:164.5},{x:-87,y:162},{x:-164,y:128},{x:-221.5,y:67},{x:-251.5,y:-10}],[{x:-316,y:-59},{x:-305,y:-113},{x:-283,y:-165},{x:-251.5,y:-211},{x:-213,y:-250},{x:-167,y:-280},{x:-117,y:-301},{x:-63.5,y:-311},{x:-8,y:-311},{x:47,y:-299.5},{x:99,y:-278},{x:144,y:-247},{x:184,y:-208},{x:214,y:-162},{x:235,y:-111},{x:246,y:-56},{x:245,y:0},{x:234,y:54},{x:212.5,y:104.5},{x:181,y:150.5},{x:141.5,y:189},{x:96,y:219},{x:45,y:240},{x:-9,y:250.5},{x:-65,y:250},{x:-119,y:238.5},{x:-170,y:216.5},{x:-216,y:186},{x:-255,y:147},{x:-285,y:101},{x:-306,y:51},{x:-317,y:-3.5}]];positionsCases=positionsCases2,$rootScope.$on("partie-general-partie-loaded",function(event,args){$scope.positionCouronnes=$scope.partie.positionCouronnes;for(var i in $scope.plateauLabyrinthe)i>0&&setPositionCouronne(i)}),$scope.updatePositionCouronne=function(index,direction){var increment=-1;if("down"==direction)var increment=1;var newPositionCouronnes=$scope.positionCouronnes;newPositionCouronnes[index]+=increment,Partie.changeCouronnes({positionCouronnes:JSON.stringify(newPositionCouronnes)}).success(function(){$scope.positionCouronnes=newPositionCouronnes,setPositionCouronne(index);for(var i=Math.max(2,index);i<Math.min(index+2,4);i++){var sectionsCouronne=$scope.plateauLabyrinthe[i].length,sectionsCouronneSuperieure=$scope.plateauLabyrinthe[i-1].length;for(var j in $scope.plateauLabyrinthe[i]){var position=(($scope.plateauLabyrinthe[i][j].position+$scope.positionCouronnes[i])%sectionsCouronne+sectionsCouronne)%sectionsCouronne,positionSuperieure=((Math.floor(position/2)-$scope.positionCouronnes[i-1])%sectionsCouronneSuperieure+sectionsCouronneSuperieure)%sectionsCouronneSuperieure;void 0!==$scope.plateauLabyrinthe[i][j].cle&&$scope.plateauLabyrinthe[i][j].cle===$scope.plateauLabyrinthe[i-1][positionSuperieure].cle&&(highlightCase(i,j),highlightCase(i-1,positionSuperieure))}}$scope.plateauLabyrintheTourDeJeu.de--,$scope.plateauLabyrintheTourDeJeu.type="couronnes",$scope.plateauLabyrintheTourDeJeu.couronne=index,$scope.plateauLabyrintheTourDeJeu.casesDisponibles=[]}).error(function(error){console.log("impossible de sauver la nouvelle position des couronnes"),console.log(error)})},$scope.hoveredCouronne=0,$scope.hoverCouronne=function(couronne){0===couronne?$scope.hoveredCouronne=0:($scope.hoveredCouronne=couronne,$timeout(function(){$scope.hoveredCouronne===couronne&&($scope.hoveredCouronne=-couronne)},800))},$scope.flechesPositions={down:[{},{left:-50,height:50,top:0},{left:-25,height:80,top:0},{left:10,height:110,top:0},{left:40,height:150,top:0}],up:[{},{left:-50,height:50,top:-50},{left:-25,height:80,top:-79},{left:10,height:110,top:-107},{left:40,height:150,top:-150}]},$rootScope.$on("partie-general-joueurs-loaded",function(event,args){for(var i in $scope.joueurs)"labyrinthe"===$scope.joueurs[i].pions[0].plateau&&addPionToCase($scope.joueurs[i].pions[0].case,$scope.joueurs[i].id)}),$rootScope.$on("plateaux-move-pion-callback",function(event,args){"labyrinthe"===args.plateau&&addPionToCase(args.case,$scope.joueurId),"labyrinthe"===args.previousPlateau&&removePionFromCase(args.previousCase,$scope.joueurId)}),$scope.plateauLabyrintheTourDeJeu={casesDisponibles:[],monteeDisponible:[]},$rootScope.$on("plateaux-labyrinthe-de",function(event,args){$scope.plateauLabyrintheTourDeJeu={casesDisponibles:[],monteeDisponible:[]};var deResult=args.result;$scope.plateauLabyrintheTourDeJeu.de=deResult;for(var couronne=-1,position=-1,i=0;i<$scope.plateauLabyrinthe.length;i++)for(var j=0;j<$scope.plateauLabyrinthe[i].length;j++)$scope.plateauLabyrinthe[i][j].numero==$scope.joueurs[$scope.joueurId].pions[0].case&&(couronne=i,position=j);rechercheCasesDisponibles(position,couronne),rechercheMonteeDisponible(position,couronne)}),$scope.movePion=function(numero){var previousCoordinates=getCoordinates($scope.joueurs[$scope.joueurId].pions[0].case),newCoordinates=getCoordinates(numero),newPions=[];$.each($scope.joueurs[$scope.joueurId].pions,function(i,obj){newPions.push($.extend(!0,{},obj))}),newPions[0].case=numero,Joueurs.movePion({pions:JSON.stringify(newPions),joueurId:$scope.joueurId}).success(function(){if(removePionFromCase($scope.joueurs[$scope.joueurId].pions[0].case,$scope.joueurId),$scope.joueurs[$scope.joueurId].pions[0].case=numero,addPionToCase(numero,$scope.joueurId),previousCoordinates.couronne===newCoordinates.couronne){var sectionsCouronne=$scope.plateauLabyrinthe[previousCoordinates.couronne].length,distance1=(previousCoordinates.position-newCoordinates.position+sectionsCouronne)%sectionsCouronne,distance2=(newCoordinates.position-previousCoordinates.position+sectionsCouronne)%sectionsCouronne;$scope.plateauLabyrintheTourDeJeu.de-=Math.min(distance1,distance2)}$scope.plateauLabyrintheTourDeJeu.type="deplacement",0===$scope.plateauLabyrintheTourDeJeu.de&&($scope.plateauLabyrintheTourDeJeu={casesDisponibles:[],monteeDisponible:[]}),rechercheCasesDisponibles(newCoordinates.position,newCoordinates.couronne),rechercheMonteeDisponible(newCoordinates.position,newCoordinates.couronne)}).error(function(error){console.log("napapu sauver pion"),console.log(error)})},$scope.monteeCouronne=function(){var previousCoordinates=getCoordinates($scope.joueurs[$scope.joueurId].pions[0].case),position=previousCoordinates.position,couronne=previousCoordinates.couronne,sectionsCouronne=$scope.plateauLabyrinthe[couronne].length,positionReelle=((position+$scope.positionCouronnes[couronne])%sectionsCouronne+sectionsCouronne)%sectionsCouronne,cle=$scope.plateauLabyrinthe[couronne][position].cle,monteeSuperieure=!1;if(0!==couronne){var sectionsCouronneSuperieure=$scope.plateauLabyrinthe[couronne-1].length,positionSuperieure=((Math.floor(positionReelle/2)-$scope.positionCouronnes[couronne-1])%sectionsCouronneSuperieure+sectionsCouronneSuperieure)%sectionsCouronneSuperieure;4!==couronne&&cle!==$scope.plateauLabyrinthe[couronne-1][positionSuperieure].cle||($scope.movePion($scope.plateauLabyrinthe[couronne-1][positionSuperieure].numero),rechercheCasesDisponibles(positionSuperieure,couronne-1),monteeSuperieure=!0)}if(4!==couronne&&!monteeSuperieure){var sectionsCouronneInferieure=$scope.plateauLabyrinthe[couronne+1].length,positionInferieure1=((2*positionReelle-$scope.positionCouronnes[couronne+1])%sectionsCouronneInferieure+sectionsCouronneInferieure)%sectionsCouronneInferieure,positionInferieure2=(positionInferieure1+1)%sectionsCouronneInferieure;cle===$scope.plateauLabyrinthe[couronne+1][positionInferieure1].cle?($scope.movePion($scope.plateauLabyrinthe[couronne+1][positionInferieure1].numero),rechercheCasesDisponibles(positionInferieure1,couronne+1)):cle===$scope.plateauLabyrinthe[couronne+1][positionInferieure2].cle&&($scope.movePion($scope.plateauLabyrinthe[couronne+1][positionInferieure2].numero),rechercheCasesDisponibles(positionInferieure2,couronne+1))}}}]),angular.module("plateaux").controller("PlateauxPaysageController",["$scope","$rootScope","$http",function($scope,$rootScope,$http){function getCoordinates(numero){for(var coordinates={col:-1,row:-1},i=0;i<14;i++)for(var j=0;j<24;j++)$scope.plateauPaysage[i].colonnes[j].numero==numero&&(coordinates={row:i,col:j});return coordinates}function addPionToCase(coordinates,joueurId){void 0!=$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs&&$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs.length>0?($scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs.push(joueurId),$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueursNumber++):($scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs=[joueurId],$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueursNumber=1),console.log($scope.plateauPaysage[coordinates.row].colonnes[coordinates.col])}function removePionFromCase(coordinates,joueurId){var index=$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs.indexOf(joueurId.toString());index>=0&&($scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueurs.splice(index,1),$scope.plateauPaysage[coordinates.row].colonnes[coordinates.col].joueursNumber--)}$scope.plateauPaysage=[],$rootScope.$on("partie-general-joueurs-loaded",function(event,args){$http({method:"GET",url:"modules/plateaux/json/plateaux-paysage.json"}).success(function(response){$scope.plateauPaysage=response;for(var i in $scope.joueurs)if("paysage"===$scope.joueurs[i].pions[0].plateau){var coordinates=getCoordinates($scope.joueurs[i].pions[0].case);addPionToCase(coordinates,i)}})}),$scope.movePion=function(numero){var previousCoordinates=getCoordinates($scope.joueurs[$scope.joueurId].pions[0].case);removePionFromCase(previousCoordinates,$scope.joueurId);var coordinates=getCoordinates(numero);$scope.joueurs[$scope.joueurId].pions[0].case=numero,addPionToCase(coordinates,$scope.joueurId),$scope.partie.dispo.plateaux.paysage--},$rootScope.$on("plateaux-move-pion-callback",function(event,args){"paysage"===args.plateau&&addPionToCase(getCoordinates(args.case),$scope.joueurId),"paysage"===args.previousPlateau&&removePionFromCase(getCoordinates(args.previousCase),$scope.joueurId)}),$scope.selectedCase={clicked:!1,numero:-1},$scope.hoveredCase=-1,$scope.hoverCase=function(numero){$scope.hoveredCase=numero},$scope.selectCase=function(numero){$scope.selectedCase.numero==numero?($scope.selectedCase.clicked=!1,$scope.selectedCase.numero=-1):($scope.selectedCase.clicked=!0,$scope.selectedCase.numero=numero)}}]),angular.module("plateaux").directive("redPlateauxPaysage",[function(){return{templateUrl:"modules/plateaux/views/plateaux-paysage.view.html",restrict:"E"}}]),angular.module("plateaux").directive("redPlateauxLabyrinthe",[function(){return{templateUrl:"modules/plateaux/views/plateaux-labyrinthe.view.html",restrict:"E"}}]),angular.module("plateaux").directive("redPlateauxEscalier",[function(){return{templateUrl:"modules/plateaux/views/plateaux-escalier.view.html",restrict:"E"}}]),angular.module("plateaux").directive("redPlateauxActionCase",[function(){return{templateUrl:"modules/plateaux/views/plateaux-action-case.view.html",restrict:"E"}}]),ApplicationConfiguration.registerModule("regles"),angular.module("regles").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("regles",{url:"/regles",templateUrl:"modules/regles/views/regles.view.html"})}]);
//# sourceMappingURL=application.min.js.map